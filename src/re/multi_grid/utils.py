import jax.numpy as jnp

# Pure jax implementation for Bessel function from
# https://github.com/benjaminpope/sibylla/blob/main/notebooks/bessel_test.ipynb
RP1 = jnp.array([
-8.99971225705559398224E8, 4.52228297998194034323E11,
-7.27494245221818276015E13, 3.68295732863852883286E15,])
RQ1 = jnp.array([
 1.0, 6.20836478118054335476E2, 2.56987256757748830383E5,
 8.35146791431949253037E7, 2.21511595479792499675E10, 4.74914122079991414898E12,
 7.84369607876235854894E14, 8.95222336184627338078E16,
 5.32278620332680085395E18,])

PP1 = jnp.array([
 7.62125616208173112003E-4, 7.31397056940917570436E-2, 1.12719608129684925192E0,
 5.11207951146807644818E0, 8.42404590141772420927E0, 5.21451598682361504063E0,
 1.00000000000000000254E0,])
PQ1 = jnp.array([
 5.71323128072548699714E-4, 6.88455908754495404082E-2, 1.10514232634061696926E0,
 5.07386386128601488557E0, 8.39985554327604159757E0, 5.20982848682361821619E0,
 9.99999999999999997461E-1,])

QP1 = jnp.array([
 5.10862594750176621635E-2, 4.98213872951233449420E0, 7.58238284132545283818E1,
 3.66779609360150777800E2, 7.10856304998926107277E2, 5.97489612400613639965E2,
 2.11688757100572135698E2, 2.52070205858023719784E1,])
QQ1  = jnp.array([
 1.0, 7.42373277035675149943E1, 1.05644886038262816351E3,
 4.98641058337653607651E3, 9.56231892404756170795E3, 7.99704160447350683650E3,
 2.82619278517639096600E3, 3.36093607810698293419E2,])

Z1 = 1.46819706421238932572E1
Z2 = 4.92184563216946036703E1
THPIO4 = 2.35619449019234492885 # 3*pi/4
SQ2OPI = .79788456080286535588 # sqrt(2/pi)

def j1_small(x):
    z = x * x
    w = jnp.polyval(RP1, z) / jnp.polyval(RQ1, z)
    w = w * x * (z - Z1) * (z - Z2)
    return w

def j1_large_c(x):
    w = 5.0 / x
    z = w * w
    p = jnp.polyval(PP1, z) / jnp.polyval(PQ1, z)
    q = jnp.polyval(QP1, z) / jnp.polyval(QQ1, z)
    xn = x - THPIO4
    p = p * jnp.cos(xn) - w * q * jnp.sin(xn)
    return p * SQ2OPI / jnp.sqrt(x)

def j1(x):
    """
    Bessel function of order one - using the implementation from CEPHES,
    translated to Jax.
    """
    return (jnp.sign(x)*jnp.where(jnp.abs(x) < 5.0,
                                  j1_small(jnp.abs(x)),
                                  j1_large_c(jnp.abs(x))))